pipeline {
    agent any
    environment {
        PR_STATUS = sh(script: '''echo ${payload} | jq ".action"''', returnStdout: true).trim()
        PR_NUMBER = sh(script: '''echo ${payload} | jq ".number"''', returnStdout: true).trim()
        PR_BRANCH = sh(script: '''echo ${payload} | jq ".pull_request.head.ref"''', returnStdout: true).trim()
        PROJECT_ID= "searce-playground"
        APP_NAME= "anilgs-review-app"
    }
    stages {
        stage ('Main Stage') {
            steps { 
                script {
                    if (PR_STATUS.contains("opened") || PR_STATUS.contains("reopened") || PR_STATUS.contains("synchronize") ) {
                        stage("Checkout code") {
                            script {
                                sh 'git checkout -b ${PR_BRANCH}'
                            }
                        }
                        stage("Build image") {
                            script {
                                sh '''
                                cd sample-app/
                                docker build . -t gcr.io/${PROJECT_ID}/${APP_NAME}:${GIT_COMMIT}
                                '''
                            }
                        }
                        stage("Push image") {
                            script {
                                withDockerRegistry([credentialsId: "gcr:${PROJECT_ID}", url: "https://gcr.io"]) {
                                sh "docker push gcr.io/${PROJECT_ID}/${APP_NAME}:${GIT_COMMIT}"
                                }
                            }
                        }
                        stage('Generate Manifest') {
                            script {
                                sh """
                                envsubst < sample-app/yamls/review.yaml > ${HOME}/patched-config.yaml
                                """
                            }
                        }
                        stage('Configure GKE cluster') {
                            script {
                                withCredentials([file(credentialsId: 'jenkins-kubeconfig', variable: 'KUBECONFIG_CONTENT')]) {
                                    sh '''
                                        if [ ! -f "~/.kube/kubeconfig" ]
                                        then
                                            echo "$KUBECONFIG_CONTENT" > ~/.kube/kubeconfig
                                        else
                                            rm kubeconfig
                                            echo "$KUBECONFIG_CONTENT" > ~/.kube/kubeconfig
                                        fi
                                    '''
                                }
                            }
                        }
                        stage('Deploy review application') {
                            script {
                                sh '''
                                kubectl apply -f ${HOME}/patched-config.yaml
                                kubectl rollout status deployment/${APP_NAME}-${PR_NUMBER}-deployment -n ${APP_NAME}-${PR_NUMBER}-ns
                                '''
                            }
                        }

                    }
                    if (PR_STATUS.contains("closed")) {
                        stage('Configure GKE cluster') {
                            script {
                                withCredentials([file(credentialsId: 'jenkins-kubeconfig', variable: 'KUBECONFIG_CONTENT')]) {
                                    sh '''
                                        if [ ! -f "kubeconfig" ]
                                        then
                                            echo "$KUBECONFIG_CONTENT" > ~/.kube/kubeconfig
                                        else
                                            rm kubeconfig
                                            echo "$KUBECONFIG_CONTENT" > ~/.kube/kubeconfig
                                        fi
                                    '''
                                }
                            }
                        }
                        stage("Delete review application") {
                            script {
                                sh "kubectl delete namespace ${APP_NAME}-${PR_NUMBER}-ns"
                            }
                        }
                    }   
                }
            }
        }
    }
    post {
        always {
            deleteDir() /* clean up our workspace */
        }
    }    
}
